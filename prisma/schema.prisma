generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  image          String?
  emailVerified  DateTime?
  accounts       Account[]
  sessions       Session[]
  events         Event[]
  participatesIn UserEvent[]
}

model Event {
  id           String   @id @default(cuid())
  name         String
  date         DateTime
  link         String
  latitude     Float
  longitude    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  creator      User     @relation(fields: [creatorId], references: [id])
  creatorId    String
  participants UserEvent[]
}

model UserEvent {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  createdAt DateTime  @default(now())

  @@id([userId, eventId])
}